(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{305:function(e,a,o){"use strict";o.r(a);var n=o(14),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("Os compoñentes Swing utilizados ata agora nas interfaces gráficas son elementos\nconfigurables e reutilizables que poden ser manexados por unha ferramenta de\ndesenvolvemento visual. Por exemplo, pode modificarse o seu tamaño e cor para adaptalo\ná interface, e estes cambios permanecen almacenados no proxecto. Os compoñentes\nusados teñen unha interface formada por un conxunto de métodos e propiedades,\naccesibles dende a paleta de propiedades. Ademais, teñen a capacidade de responder a\neventos.")]),e._v(" "),a("p",[e._v("En terminoloxía Java, un compoñente software é unha clase creada para ser reutilizada.\nDefínese polo seu estado, que se almacena nun conxunto de propiedades, as cales poden\nser modificadas para adaptar o compoñente ao programa no que se insira, e un\ncomportamento, que se define polos eventos aos que responde e os métodos que\nexecuta ante ditos eventos.\nA interface dun compoñente está formada por un subconxunto dos seus atributos e\nmétodos.")]),e._v(" "),a("p",[e._v("Programar un compoñente dende cero é bastante complicado, pois hai que implementar\ndende como se renderiza en pantalla ata como responde aos eventos, o que significa\nmoitas liñas de código. Realmente, vaise partir dun compoñente de Swing que actuará\ncomo base e estendelo a través do mecanismo de herdanza, creando así un compoñente\npersonalizado.")])])}),[],!1,null,null,null);a.default=s.exports}}]);